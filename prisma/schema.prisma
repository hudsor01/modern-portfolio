// This is your Prisma schema file for the modern portfolio blog system.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// CORE BLOG ENTITIES
// =======================

model BlogPost {
  id          String          @id @default(cuid())
  title       String
  slug        String          @unique
  excerpt     String?         @db.Text
  content     String          @db.Text
  contentType ContentType     @default(MARKDOWN)
  status      PostStatus      @default(DRAFT)
  
  // SEO Fields
  metaTitle       String?
  metaDescription String?       @db.VarChar(160)
  keywords        String[]
  canonicalUrl    String?
  
  // Social Media
  ogTitle       String?
  ogDescription String?         @db.VarChar(300)
  ogImage       String?
  twitterTitle  String?
  twitterDescription String?    @db.VarChar(200)
  twitterImage  String?
  
  // Content Structure
  featuredImage   String?
  featuredImageAlt String?
  readingTime     Int?            // in minutes
  wordCount       Int?
  
  // Publishing
  publishedAt     DateTime?
  scheduledAt     DateTime?
  archivedAt      DateTime?
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Author relationship
  authorId        String
  author          Author          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Category and tags
  categoryId      String?
  category        Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags            PostTag[]
  
  // Content relationships
  seriesPosts     SeriesPost[]
  relatedPosts    PostRelation[]  @relation("OriginalPost")
  relatedToPosts  PostRelation[]  @relation("RelatedPost")
  
  // Version control
  versions        PostVersion[]
  currentVersion  Int             @default(1)
  
  // Analytics & Engagement
  viewCount       Int             @default(0)
  likeCount       Int             @default(0)
  shareCount      Int             @default(0)
  commentCount    Int             @default(0)
  
  // SEO Analytics
  seoScore        Float?          @default(0)
  seoAnalysis     Json?
  lastSeoCheck    DateTime?
  
  // Performance tracking
  views           PostView[]
  interactions    PostInteraction[]
  seoEvents       SEOEvent[]
  seoKeywords     SEOKeyword[]
  sitemapEntries  SitemapEntry[]
  
  @@map("blog_posts")
  @@index([status, publishedAt(sort: Desc)])
  @@index([slug])
  @@index([authorId])
  @@index([categoryId])
  @@index([createdAt(sort: Desc)])
  @@index([viewCount(sort: Desc)])
}

model Author {
  id              String          @id @default(cuid())
  name            String
  email           String          @unique
  slug            String          @unique
  bio             String?         @db.Text
  avatar          String?
  website         String?
  twitter         String?
  linkedin        String?
  github          String?
  
  // SEO
  metaDescription String?         @db.VarChar(160)
  
  // Analytics
  totalViews      Int             @default(0)
  totalPosts      Int             @default(0)
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relationships
  posts           BlogPost[]
  postVersions    PostVersion[]   @relation("PostVersions")
  
  @@map("authors")
  @@index([slug])
}

model Category {
  id              String          @id @default(cuid())
  name            String          @unique
  slug            String          @unique
  description     String?         @db.Text
  color           String?         // Hex color for UI
  icon            String?         // Icon name or URL
  
  // SEO
  metaTitle       String?
  metaDescription String?         @db.VarChar(160)
  keywords        String[]
  
  // Hierarchy
  parentId        String?
  parent          Category?       @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[]      @relation("CategoryHierarchy")
  
  // Analytics
  postCount       Int             @default(0)
  totalViews      Int             @default(0)
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relationships
  posts           BlogPost[]
  
  @@map("categories")
  @@index([slug])
  @@index([parentId])
}

model Tag {
  id              String          @id @default(cuid())
  name            String          @unique
  slug            String          @unique
  description     String?
  color           String?         // Hex color for UI
  
  // SEO
  metaDescription String?         @db.VarChar(160)
  
  // Analytics
  postCount       Int             @default(0)
  totalViews      Int             @default(0)
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relationships
  posts           PostTag[]
  
  @@map("tags")
  @@index([slug])
}

// =======================
// RELATIONSHIP TABLES
// =======================

model PostTag {
  postId    String
  tagId     String
  
  post      BlogPost        @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       Tag             @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  createdAt DateTime        @default(now())
  
  @@id([postId, tagId])
  @@map("post_tags")
}

model PostRelation {
  id              String          @id @default(cuid())
  originalPostId  String
  relatedPostId   String
  relationType    RelationType    @default(RELATED)
  
  originalPost    BlogPost        @relation("OriginalPost", fields: [originalPostId], references: [id], onDelete: Cascade)
  relatedPost     BlogPost        @relation("RelatedPost", fields: [relatedPostId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime        @default(now())
  
  @@unique([originalPostId, relatedPostId])
  @@map("post_relations")
  @@index([originalPostId])
  @@index([relatedPostId])
}

// =======================
// CONTENT MANAGEMENT
// =======================

model PostVersion {
  id              String          @id @default(cuid())
  postId          String
  version         Int
  title           String
  content         String          @db.Text
  excerpt         String?         @db.Text
  
  // Change tracking
  changeType      ChangeType      @default(MINOR)
  changeNotes     String?         @db.Text
  
  // Author of this version
  authorId        String
  author          Author          @relation("PostVersions", fields: [authorId], references: [id])
  
  // Timestamps
  createdAt       DateTime        @default(now())
  
  // Relationships
  post            BlogPost        @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([postId, version])
  @@map("post_versions")
  @@index([postId, version(sort: Desc)])
}

model PostSeries {
  id              String          @id @default(cuid())
  name            String
  slug            String          @unique
  description     String?         @db.Text
  
  // SEO
  metaTitle       String?
  metaDescription String?         @db.VarChar(160)
  
  // Display
  coverImage      String?
  color           String?
  
  // Analytics
  totalPosts      Int             @default(0)
  totalViews      Int             @default(0)
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relationships
  posts           SeriesPost[]
  
  @@map("post_series")
  @@index([slug])
}

model SeriesPost {
  seriesId      String
  postId        String
  order         Int
  
  series        PostSeries      @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  post          BlogPost        @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime        @default(now())
  
  @@id([seriesId, postId])
  @@unique([seriesId, order])
  @@map("series_posts")
}

// =======================
// ANALYTICS & TRACKING
// =======================

model PostView {
  id              String          @id @default(cuid())
  postId          String
  
  // Visitor tracking (anonymized)
  visitorId       String?         // Anonymous visitor ID
  sessionId       String?         // Session identifier
  
  // Request details
  ipAddress       String?         @db.Inet
  userAgent       String?         @db.Text
  referer         String?
  
  // Location (optional, anonymized)
  country         String?
  region          String?
  city            String?
  
  // Engagement metrics
  readingTime     Int?            // Time spent on post in seconds
  scrollDepth     Float?          // Percentage of post scrolled
  
  // Timestamps
  viewedAt        DateTime        @default(now())
  
  // Relationships
  post            BlogPost        @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("post_views")
  @@index([postId, viewedAt(sort: Desc)])
  @@index([visitorId])
  @@index([viewedAt(sort: Desc)])
}

model PostInteraction {
  id              String          @id @default(cuid())
  postId          String
  type            InteractionType
  
  // Visitor tracking (anonymized)
  visitorId       String?
  sessionId       String?
  
  // Interaction details
  value           String?         // Additional data (e.g., shared platform)
  metadata        Json?           // Flexible metadata storage
  
  // Timestamps
  createdAt       DateTime        @default(now())
  
  // Relationships
  post            BlogPost        @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("post_interactions")
  @@index([postId, type])
  @@index([createdAt(sort: Desc)])
}

// =======================
// SEO AUTOMATION
// =======================

model SEOEvent {
  id              String          @id @default(cuid())
  postId          String?         // Nullable for site-wide events
  type            SEOEventType
  
  // Event details
  title           String
  description     String?         @db.Text
  severity        SEOSeverity     @default(INFO)
  
  // Data
  oldValue        String?         @db.Text
  newValue        String?         @db.Text
  recommendations String?         @db.Text
  
  // Processing
  processed       Boolean         @default(false)
  processedAt     DateTime?
  
  // Timestamps
  createdAt       DateTime        @default(now())
  
  // Relationships
  post            BlogPost?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("seo_events")
  @@index([postId])
  @@index([type, createdAt(sort: Desc)])
  @@index([processed, severity])
}

model SEOKeyword {
  id              String          @id @default(cuid())
  keyword         String
  postId          String?
  
  // Tracking data
  position        Int?            // Search ranking position
  searchVolume    Int?            // Monthly search volume
  difficulty      Float?          // Keyword difficulty (0-100)
  cpc             Float?          // Cost per click
  
  // Performance
  clicks          Int             @default(0)
  impressions     Int             @default(0)
  ctr             Float?          // Click-through rate
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lastChecked     DateTime?
  
  // Relationships
  post            BlogPost?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([keyword, postId])
  @@map("seo_keywords")
  @@index([keyword])
  @@index([postId])
  @@index([position])
}

model SitemapEntry {
  id              String          @id @default(cuid())
  url             String          @unique
  lastMod         DateTime
  changeFreq      ChangeFrequency @default(WEEKLY)
  priority        Float           @default(0.5) @db.Real
  
  // Content association
  postId          String?
  post            BlogPost?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Status
  included        Boolean         @default(true)
  
  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("sitemap_entries")
  @@index([url])
  @@index([lastMod(sort: Desc)])
  @@index([included])
}

// =======================
// ENUMS
// =======================

enum PostStatus {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
  DELETED
}

enum ContentType {
  MARKDOWN
  HTML
  RICH_TEXT
}

enum RelationType {
  RELATED
  SEQUEL
  PREQUEL
  UPDATE
  REFERENCE
}

enum ChangeType {
  MAJOR
  MINOR
  PATCH
  CONTENT
  SEO
  STRUCTURE
}

enum InteractionType {
  LIKE
  SHARE
  COMMENT
  BOOKMARK
  SUBSCRIBE
  DOWNLOAD
}

enum SEOEventType {
  TITLE_CHANGE
  META_DESCRIPTION_CHANGE
  KEYWORD_UPDATE
  CONTENT_ANALYSIS
  PERFORMANCE_ALERT
  RANKING_CHANGE
  TECHNICAL_ISSUE
  OPPORTUNITY
}

enum SEOSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  INFO
}

enum ChangeFrequency {
  ALWAYS
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  NEVER
}