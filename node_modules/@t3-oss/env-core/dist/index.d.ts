import { ZodError, ZodType, z, ZodObject } from 'zod';

type ErrorMessage<T extends string> = T;
type Simplify<T> = {
    [P in keyof T]: T[P];
} & {};
type Impossible<T extends Record<string, any>> = Partial<Record<keyof T, never>>;
interface BaseOptions {
    isServer?: boolean;
    onValidationError?: (error: ZodError) => never;
    onInvalidAccess?: (variable: string) => never;
    skipValidation?: boolean;
}
interface LooseOptions extends BaseOptions {
    runtimeEnvStrict?: never;
    runtimeEnv: Record<string, string | boolean | number | undefined>;
}
interface StrictOptions<TPrefix extends string, TServer extends Record<string, ZodType>, TClient extends Record<string, ZodType>> extends BaseOptions {
    runtimeEnvStrict: Record<{
        [TKey in keyof TClient]: TKey extends `${TPrefix}${string}` ? TKey : never;
    }[keyof TClient] | {
        [TKey in keyof TServer]: TKey extends `${TPrefix}${string}` ? never : TKey;
    }[keyof TServer], string | boolean | number | undefined>;
    runtimeEnv?: never;
}
interface ClientOptions<TPrefix extends string, TClient extends Record<string, ZodType>> {
    clientPrefix: TPrefix;
    client: Partial<{
        [TKey in keyof TClient]: TKey extends `${TPrefix}${string}` ? TClient[TKey] : ErrorMessage<`${TKey extends string ? TKey : never} is not prefixed with ${TPrefix}.`>;
    }>;
}
interface ServerOptions<TPrefix extends string, TServer extends Record<string, ZodType>> {
    server: Partial<{
        [TKey in keyof TServer]: TPrefix extends "" ? TServer[TKey] : TKey extends `${TPrefix}${string}` ? ErrorMessage<`${TKey extends `${TPrefix}${string}` ? TKey : never} should not prefixed with ${TPrefix}.`> : TServer[TKey];
    }>;
}
type ServerClientOptions<TPrefix extends string, TServer extends Record<string, ZodType>, TClient extends Record<string, ZodType>> = (ClientOptions<TPrefix, TClient> & ServerOptions<TPrefix, TServer>) | (ServerOptions<TPrefix, TServer> & Impossible<ClientOptions<never, never>>) | (ClientOptions<TPrefix, TClient> & Impossible<ServerOptions<never, never>>);
type EnvOptions<TPrefix extends string, TServer extends Record<string, ZodType>, TClient extends Record<string, ZodType>> = (LooseOptions & ServerClientOptions<TPrefix, TServer, TClient>) | (StrictOptions<TPrefix, TServer, TClient> & ServerClientOptions<TPrefix, TServer, TClient>);
declare function createEnv<TPrefix extends string = "", TServer extends Record<string, ZodType> = NonNullable<unknown>, TClient extends Record<string, ZodType> = NonNullable<unknown>>(opts: EnvOptions<TPrefix, TServer, TClient>): Simplify<z.infer<ZodObject<TServer>> & z.infer<ZodObject<TClient>>>;

export { BaseOptions, ClientOptions, EnvOptions, ErrorMessage, LooseOptions, ServerClientOptions, ServerOptions, Simplify, StrictOptions, createEnv };
